# -*- coding: utf-8 -*-
"""drowsiness_model.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zkftFWZ8DnWJkuD77KQpn0GB5pTSzXwb
"""

#import necessary libraries
import pandas as pd
import numpy as np
import cv2
import matplotlib.pyplot as plt
import tensorflow as tf
from tensorflow.keras.layers import Dense, Conv2D, MaxPool2D, Flatten, Dropout, BatchNormalization
from tensorflow.keras.utils import to_categorical
from tensorflow.keras.optimizers import Adam, SGD
from tensorflow.keras.preprocessing.image import ImageDataGenerator, img_to_array, load_img
from tensorflow.keras.models import Sequential
import os
import random

dataset = '/content/drive/MyDrive/dataset'
train = '/content/drive/MyDrive/dataset/train'
test = '/content/drive/MyDrive/dataset/test'

def create_dataset(data):
  Images = []
  Labels = []
  Class = ['Open','Closed']
  for x in os.listdir(data):
    if x in Class:
      for y in os.listdir(data+'/'+ x):
        Images.append(data+'/'+ x + '/'+ y)
        Labels.append(x)
  return Images, Labels

Images, Labels = create_dataset(train)

# creating dataframe
train_data = pd.DataFrame({'Image': Images, 'Label' : Labels})
train_data.head()

train_data = train_data[0:1200]
train_data.shape

for i in (random.sample(range(1200), 5)):
  plt.figure(figsize = (1,1))
  plt.imshow(plt.imread(train_data['Image'][i]))
  plt.axis('off')
  plt.title(train_data['Label'][i])
  plt.show()

#train test split
from sklearn.model_selection import train_test_split
train_new , valid = train_test_split(train_data, train_size=0.8, random_state =0 )
print(train_new.shape, valid.shape)

train_datagen = ImageDataGenerator()


train = train_datagen.flow_from_dataframe(dataframe=train_new, x_col='Image', y_col='Label', batch_size=16,
                                             target_size=(32, 32), class_mode ='categorical', shuffle=True )
valid = train_datagen.flow_from_dataframe(dataframe=valid, x_col='Image', y_col='Label', batch_size=16,
                                             target_size=(32, 32), class_mode ='categorical', shuffle=True )

from PIL import Image
try:
  for x in train_data.Image:
    plt.imread(x)
except:
  print(x)

network = Sequential()
network.add(Conv2D(filters = 16, kernel_size=5, padding='same', activation='relu', input_shape= (32, 32, 3)))
network.add(MaxPool2D(pool_size=(4,4)))
network.add(BatchNormalization())
network.add(Conv2D(filters = 32, kernel_size=5, padding='same', activation='relu'))
network.add(MaxPool2D(pool_size=(4,4)))
network.add(BatchNormalization())
network.add(Flatten())
network.add(Dense(64, activation='relu'))
network.add(Dropout(0.2))
network.add(Dense(2, activation='softmax'))
network.summary()

network.compile(loss = 'categorical_crossentropy', optimizer = Adam(learning_rate=0.01), metrics = ['accuracy'])
history = network.fit(train, epochs = 10, validation_data = valid, verbose=2)

Image, Label =  create_dataset(test)
# creating dataframe
Test_data = pd.DataFrame({'Image': Image, 'Label' : Label})
Test_data.head()

for i in (random.sample(range(200), 5)):
  plt.figure(figsize = (1,1))
  plt.imshow(plt.imread(Test_data['Image'][i]))
  plt.axis('off')
  plt.show()

test_gen = train_datagen.flow_from_dataframe(dataframe=Test_data, x_col='Image', y_col='Label', batch_size=16,
                                             target_size=(32, 32), class_mode ='categorical', shuffle=True )

network.evaluate(test_gen)

test_gen[0][0].shape

network.save("Model.h5")

network.save_weights('weights.h5')

model = tf.keras.models.load_model('/content/Model.h5')

def predictImage(filename):
    img1 = cv2.imread(filename)
    img1 = cv2.cvtColor(img1, cv2.COLOR_BGR2RGB)
    img = cv2.resize(img1, (32,32))
    plt.imshow(img1)
    img = np.expand_dims(img,axis=0)
    val = network.predict(img)
    print(img.shape)
    print(np.argmax(val, axis =1)[0])

predictImage('/content/drive/MyDrive/dataset/test/Closed/_434.jpg')

